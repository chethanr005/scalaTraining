postgres = {
  dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
  properties = {
    serverName = "192.168.1.98"
    portNumber = "5432"
    databaseName = "function-testing"
    user = "postgres"
    password = "admin"
  }
}


akka {
  loglevel = DEBUG
}

mySeparateConfig {
  akka {
    loglevel = "WARNING"
  }
}

customStrategyConfigurator {
  akka {
    actor {
      guardian-supervisor-strategy = "akka.actor.StoppingSupervisorStrategy"
    }
  }
}

#timed assertions test config
specialAkkaTimeConfig {
  akka.test.single-expect-default = 0.3s
}

interceptingLogMessages {
  akka {
    loggers = ["akka.testkit.TestEventListener"]
  }
}

routerConfiguration {
  akka {
    actor.deployment {
      /poolMaster3 {
        router = round-robin-pool
        nr-of-instances = 1
      }

      /groupedMaster {
        router = round-robin-group
        routees.paths = ["/user/slave_1", "/user/slave_2", "/user/slave_3", "/user/slave_4", "/user/slave_5"]
      }
    }
  }
}


my-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 1
  }
  // No of messages that a dispatcher can handle for one actor before moving on to the another actor.
  throughput = 30
}


Dispatcher-Demo {
  akka.actor.deployement {
    /customDispatcher = my-dispatcher
  }
}


support-ticket-dispatcher {
  mailbox-type = "com.chethan.akka.classicActor.infrastucture.MailBoxes$SupportTicketPriorityMailbox"
  //  mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
}


customMailBox {
  control-aware-mailbox {
    mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
  }
  akka.actor.deployment {
    /altControlAwareActor {
      mailbox = control-aware-mailbox
    }
  }
}

typedAkkaConfig {
  akka {
    loglevel = "DEBUG"
  }
}

typedAkkaConfig2 {
  akka.loglevel = "INFO"
}

customTypedMailBoxSettings {

  custom-mailbox {
    mailbox-type = "com.chethan.akka.actorsTyped.MailBoxSpecs$CustomMailBoxPrioritizer"
  }

  control-mailbox {
    mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
  }


  akka.actor.default.dispatcher {

    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 1
    }
    throughput = 10
  }
}


customTypedDispatcher {
  akka.actor.default-dispatcher {

    type = PinnedDispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 10
    }
    throughput = 5
  }
}


CusDis{

  type = CallingThreadDispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 10
  }
  throughput = 5
}

